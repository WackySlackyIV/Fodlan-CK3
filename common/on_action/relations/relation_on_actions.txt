#On actions relating to relationships between characters

##################
# Lover relation on_action
##################

#Fired from the a quarterly pulse once a year
lover_quarterly_pulse = {
	trigger = {
		scope:quarter = 1
	}
	on_actions = {
		lover_status_changes
	}
}

#Lover status changes
lover_status_changes = {
	trigger = {
		num_of_relation_lover > 0
		is_available_adult = yes
	}
	random_events = {
		chance_to_happen = 50
		100 = 0
		100 = lover.0001 #Your lover has  a low opinion of you, breaks up
	}
}


on_set_relation_lover = {
	effect = {
		give_incest_secret_or_nothing_with_target_effect = { CHARACTER = scope:target }
		scope:target = { give_incest_secret_or_nothing_with_target_effect = { CHARACTER = root } }
		give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = scope:target }
		scope:target = { give_homosexual_secret_or_nothing_with_target_effect = { CHARACTER = root } }
		if = {
			limit = {
				has_relation_potential_lover = scope:target
			}
			remove_relation_potential_lover = scope:target
		}
	}
	#events = {
	#	lover.0010
	#}
}

on_remove_relation_lover = {
	effect = {
		lose_lover_effect = {
			LOVER = scope:target
		}
	}
}

######################
# Friendship on actions
######################
friendship_quarterly_pulse = {
	trigger = {
		scope:quarter = 2
	}
	on_actions = {
		friendship_status_changes
	}
}


friendship_status_changes = {
	trigger = {
		OR = {
			num_of_relation_friend > 0
		}
		is_available_adult = yes
	}

	random_events = { # If we add updates that are time sensitive, we need to rework this so it's no longer random when/what fires
		chance_to_happen = 50
		100 = 0
		100 = friendship.0001 #Lose a friend you no longer like
		100 = friendship.0010 #Lose a best friend you no longer like
		100 = friendship.0014 #Become Rivals instead of Friends
		100 = friendship.0018 #Lose a Friend due to having so many of them
	}
}


# Gaining Friend relations
on_set_relation_friend = {
	effect = {
		if = {
			limit = {
				has_relation_potential_friend = scope:target
			}
			remove_relation_potential_friend = scope:target
		}
		if = {
			limit = { has_perk = confidants_perk }
			add_character_modifier = {
				modifier = confidants_perk_modifier
			}
		}
		scope:target = {
			if = {
				limit = { has_perk = confidants_perk }
				add_character_modifier = {
					modifier = confidants_perk_modifier
				}
			}
			friendly_counsel_skill_gain_effect = yes
		}
		friendly_counsel_skill_gain_effect = yes
	}
}

# Losing friend relations. Not fired on death, just relationship expiring
# root = owner of the relationship
# scope:target = target
on_remove_relation_friend = {
	effect = {
		remove_character_modifier = confidants_perk_modifier
		trigger_event = death_management.1003 
		scope:target = {
			trigger_event = death_management.1003
			if = {
				limit = { has_perk = confidants_perk }
				remove_character_modifier = confidants_perk_modifier
			}
		}
	}
}

on_death_relation_friend = {
	effect = {
		remove_character_modifier = confidants_perk_modifier
		trigger_event = death_management.1003 
		scope:target = {
			trigger_event = death_management.1003 
			if = {
				limit = { has_perk = confidants_perk }
				remove_character_modifier = confidants_perk_modifier
			}
		}
	}
}



####################
# Rival on actions
####################
rival_quarterly_pulse = {
	trigger = {
		scope:quarter = 3
	}
	on_actions = {
		rival_relation_changes
	}
}


rival_relation_changes = {
	trigger = {
		OR = {
			num_of_relation_rival > 0
			num_of_relation_potential_rival > 0
		}
		is_available_adult = yes
	}

	random_events = {
		chance_to_happen = 50
		100 = 0
		100 = rivalry.0001
		100 = rivalry.0003 #Nemesis becomes too pathetic
	}
}

on_set_relation_rival = {
	effect = {
		if = {
			limit = {
				has_relation_potential_rival = scope:target
			}
			remove_relation_potential_rival = scope:target
		}
	}
}

on_remove_relation_rival = {
#	events = {
#		rivalry.9999
#	}
}


####################
# Mentor/Student on actions
####################
mentor_student_quarterly_pulse = {
	trigger = {
		scope:quarter = 4
	}
	on_actions = {
		mentor_student_relation_changes
	}
}




mentor_student_relation_changes = {
	trigger = {
		num_of_relation_intrigue_mentor > 0
		is_available_adult = yes
	}

	random_events = {
		chance_to_happen = 50
		500 = 0
		100 = mentor_student.0001
		100 = mentor_student.0002
		100 = mentor_student.0003
	}
}



##################
# Guardian/ward
##################

#Fired for the ward when they remove the relation with the guardian
on_remove_relation_guardian = {
	effect = {
		#Remove guardian opinions when guardian is removed from ward or the ward is about to die
		if = {
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = root
				GUARDIAN = scope:target
				WARD_LIEGE = scope:ward_liege
			}
			#Fallback to make sure they go home
			if = {
				limit = {
					is_foreign_court_guest = yes
					NOT = { host = liege }
				}
				return_to_court = yes
			}
		}
	}
}

#Fired for the ward when they die while having a guardian
on_death_relation_guardian = {
	effect = {
		#Remove guardian opinions when guardian is removed from ward or the ward is about to die
		if = {
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = root
				GUARDIAN = scope:target
				WARD_LIEGE = scope:ward_liege
			}
			#To make sure they go home
			if = {
				limit = {
					is_foreign_court_guest = yes
					NOT = { host = liege }
				}
				return_to_court = yes
			}
		}
	}
}

#Fired for the guardian when they remove the relation with the ward
on_remove_relation_ward = {
	effect = {
		#Remove guardian opinions when ward is removed from guardian or when the guardian is about to die
		if = { #Commented out because this shouldn't be needed but if we get errors something weird might be going on
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = scope:target
				GUARDIAN = root
				WARD_LIEGE = scope:ward_liege
			}

			#Fallback to make sure they go home
			if = {
				limit = {
					is_foreign_court_guest = yes
					NOR = {
						host = liege
						is_landed = yes
						any_relation = { #They're not at another ward's court
							type = ward
							is_landed = yes
							this = scope:guardian.host
						}
					}
				}
				return_to_court = yes
			}
		}
	}
}

#Fired for the guardian when they die while having a ward
on_death_relation_ward = {
	effect = {
		#Remove guardian opinions when ward is removed from guardian or when the guardian is about to die
		if = { #Commented out because this shouldn't be needed but if we get errors something weird might be going on
			limit = { exists = liege }
			liege = { save_scope_as = ward_liege }
			guardian_remove_opinion_effect = {
				WARD = scope:target
				GUARDIAN = root
				WARD_LIEGE = scope:ward_liege
			}
			#To make sure they go home
			if = {
				limit = {
					is_foreign_court_guest = yes
					NOT = { host = liege }
				}
				return_to_court = yes
			}
		}
	}
}
