# The entry should be named in the same way that the elective succession law is named to define it's voter's logic.
# Root scope - Elector, the character voting in the election.
# scope:candidate scope - Candidate, Character considered for the title.
# scope:title scope - Title, The title the nomination is for.
# scope:holder scope - Ruler, The ruler currently holding the title.
# scope:holder_candidate scope - Favored Candidate, The title owner's candidate.
# The voter will vote for the top score candidate calculated from this script.

alliance_elective = { #alliance elective
	elector_vote_strength = {
		base = 1
		modifier = { #leader
			desc = tooltip_alliance_leader
			add = 1
			this = scope:holder
		}
	}
	
	electors = {
		max = 5  #5 great lords of leicester
		add = holder #alliance leader
		add = { 
			type = title_dejure_vassals
			limit = {
				is_vassal_of = scope:holder
				is_adult = yes
				is_ruler = yes
				is_landed = yes
				highest_held_title_tier > 2 #counts excluded.
				domain_size >= 1
			}
		}
		priority = {
			base = 1
			modifier = { # leader is always picked
				add = 200
				this = scope:holder
			}
			modifier = { # powerfull vassals
				add = 5
				is_powerful_vassal = yes
			}

			modifier = { # councilors
				add = 5
				is_councillor = yes
			}
			modifier = { #economic power
				add = {
					every_sub_realm_title = {
						limit = {
							tier = tier_county
							development_level > 0
						}
						add = {
							value = this.development_level
							if = {
								limit = {
									NOT = { this.faith = root.faith }
								}
								divide = 2
							}
							if = {
								limit = {
									NOT = { this.culture_group = root.culture_group }
								}
								divide = 2
							}
							min = 1
						}
					}
				}
			}
		}
	}

	candidate_score = {
		base = 0
		#Princely Elective uses very similar behavior to Feudal Elective. The few changes to the modifiers are already accounted for in the scripted_modifiers themselves.
		######################	Elector self-voting pattern	##########################
		elector_self_voting_pattern_feudal_elective_modifier = yes

		##########################	Holder voting pattern	##########################
		holder_voting_pattern_feudal_elective_modifier = yes

		##########################	Elector voting patterns (circumstances)	##########################
		elector_voting_pattern_circumstances_feudal_elective_modifier = yes

		##########################	Elector voting patterns (prestige/piety)	##########################
		elector_voting_pattern_prestige_piety_feudal_elective_modifier = yes

		##########################	Elector voting patterns (traits)	##########################
		elector_voting_pattern_traits_feudal_elective_modifier = yes

		##########################	Elector voting patterns (opinion)	##########################
		elector_voting_pattern_opinion_feudal_elective_modifier = yes

		##########################	Alliance Voting Patterns		##########################
		elector_voting_pattern_alliance_elective_modifier = yes
	}
	
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_close_or_extended_family
			limit = {
				is_adult = yes
				has_culture = culture:leicester
				is_close_family_of = scope:holder
				NOT = { has_trait = disinherited }
			}
		}
		add = {
			type = holder_direct_vassals
			limit = {
				is_adult = yes
				has_culture = culture:leicester
				highest_held_title_tier > 2 #counts excluded.
				NOT = { has_trait = disinherited }
			}
		}
	}
}