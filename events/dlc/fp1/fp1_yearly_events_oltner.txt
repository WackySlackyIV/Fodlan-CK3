namespace = fp1_yearly

##################################################
# #Standard Yearlies
# 2000 - 2004	A Child wants to run away to marry their beloved
# 2100 - 2101	Two lovers duel for your love
# 2200 - 2204	Berserker rampages though court
# 2300 - 2300	Convince a group of soldiers to join you
# 2400 - 2400	Invest in something that'll aid in your hunts
# 2500 - 2500	What's that deviant up to this time!?
# 2600 - 2601	Become a Berserker
##################################################

# A Child wants to run away to marry their beloved

scripted_trigger suitable_child_to_leave = {
	is_physically_able_adult = yes
	has_personality_introverted_trigger = no
	is_courtier_of = root
	age <= 40
	is_concubine = no
	NOR = {
		has_trait = celibate
		has_trait = chaste
		has_sexuality = asexual
		has_character_modifier = mellowed_spirit
		root = {
			has_strong_hook = prev
		}
	}
	can_be_knight_trigger = {
		ARMY_OWNER = root
	}
}

scripted_trigger suitable_lover_for_child = {
	is_physically_able_adult = yes
	allowed_to_marry_character_gender_trigger = { CHARACTER = scope:child_to_leave }
	scope:child_to_leave = { allowed_to_marry_character_gender_trigger = { CHARACTER = prev } }
	is_physically_able_adult = yes
	age <= 35
	is_married = no
	can_marry_trigger = yes
	is_concubine = no
	is_attracted_to_gender_of = scope:child_to_leave
	OR = {
		can_set_relation_lover_trigger = { CHARACTER = scope:child_to_leave }
		has_relation_lover = scope:child_to_leave
	}
}

scripted_effect child_leaves_effect = {
	hidden_effect = {
		if = {
			limit = {
				is_betrothed = yes
			}
			break_betrothal = betrothed
		}
		scope:lover_of_child = {
			if = {
				limit = {
					is_betrothed = yes
				}
				break_betrothal = scope:lover_of_child.betrothed
			}
		}
	}
	if = {
		limit = {
			scope:lover_of_child = {
				is_alive = yes
			}
			is_married = yes
			exists = scope:child_to_leave.primary_spouse
			NOT = {
				is_spouse_of = scope:lover_of_child
			}
		}
		scope:child_to_leave.primary_spouse = {
			save_scope_as = child_to_leave_divorcee
		}
		less_verbose_divorce_effect = {
			DIVORCER = scope:child_to_leave
			DIVORCEE = scope:child_to_leave_divorcee
		}
	}
	if = {
		limit = {
			scope:child_to_leave = {
				is_alive = yes
			}
			scope:lover_of_child = {
				is_alive = yes
				is_married = yes
				exists = scope:lover_of_child.primary_spouse
				NOT = {
					is_spouse_of = scope:child_to_leave
				}
			}
		}
		hidden_effect = {
			scope:lover_of_child.primary_spouse = {
				save_scope_as = lover_of_child_divorcee
			}
			scope:lover_of_child = {
				less_verbose_divorce_effect = {
					DIVORCER = scope:lover_of_child
					DIVORCEE = scope:lover_of_child_divorcee
				}
			}
		}
	}
	if = {
		limit = {
			is_female = yes
			is_lowborn = no
			scope:lover_of_child = {
				is_lowborn = yes
			}
		}
		marry_matrilineal = scope:lover_of_child
	}
	else_if = {
		limit = {
			is_male = yes
			is_lowborn = yes
			scope:lover_of_child = {
				is_lowborn = no
			}
		}
		marry_matrilineal = scope:lover_of_child
	}
	else = {
		marry = scope:lover_of_child
	}
	move_to_pool_at = scope:somewhere_else
	hidden_effect = {
		scope:lover_of_child = {
			move_to_pool_at = scope:somewhere_else
		}
	}
	scope:parent = {
		if = {
			limit = {
				has_hook = scope:child_to_leave
			}
			remove_hook = {
				target = scope:child_to_leave
			}
		}
	}
	add_character_modifier = {
		modifier = lust_for_adventure
		years = 20
	}
}

# A Child wants to run away to marry their beloved
fp1_yearly.2000 = {
	type = character_event
	title = fp1_yearly.2000.t
	desc = fp1_yearly.2000.desc
	theme = family
	left_portrait = {
		character = scope:child_to_leave
		animation = personality_bold
	}
	right_portrait = {
		character = scope:lover_of_child
		animation = flirtation
	}
	override_background = { event_background = market }

	trigger = {
		#DLC check.
		has_fp1_dlc_trigger = yes
		
		#Standard checks.
		is_available_at_peace_adult = yes
		NOT = { has_character_flag = had_event_fp1_yearly_2000 }
		
		#has_culture_group = culture_group:north_germanic_group
		
		any_child = {
			suitable_child_to_leave = yes
			save_temporary_scope_as = child_to_leave
		}
		any_pool_character = {
			province = root.capital_province
			suitable_lover_for_child = yes
		}

	}

	immediate = {
		add_character_flag = {
			flag = had_event_fp1_yearly_2000
			days = 1825
		}
		random_child = {
			limit = {
				suitable_child_to_leave = yes
				has_personality_dominant_trigger = yes
				is_primary_heir_of = root
			}
			alternative_limit = {
				suitable_child_to_leave = yes
				has_personality_dominant_trigger = yes
			}
			alternative_limit = {
				suitable_child_to_leave = yes
			}
			save_scope_as = child_to_leave
		}
		random_pool_character = {
			province = root.capital_province
			limit = {
				suitable_lover_for_child = yes
			}
			if = {
				limit = {
					NOT = {
						has_relation_lover = scope:child_to_leave
					}
				}
				hidden_effect = {
					set_random_lover_reason = { TARGET = scope:child_to_leave }
				}
			}
			save_scope_as = lover_of_child
		}
		random_independent_ruler = {
			limit = {
				is_landed = yes
				in_diplomatic_range = root
			}
			capital_province = {
				save_scope_as = somewhere_else
			}
		}
		save_scope_as = parent
	}

	option = { # Fight them to make them stay
		name = fp1_yearly.2000.a
		
		trigger = {
			can_start_single_combat_trigger = yes
			scope:child_to_leave = {
				can_start_single_combat_trigger = yes
			}
		}
		custom_tooltip = fp1_yearly.2000.a.tt
		
		configure_start_single_combat_effect = {
			SC_INITIATOR = scope:parent
			SC_ATTACKER = scope:parent
			SC_DEFENDER = scope:child_to_leave
			FATALITY = no
			FIXED = no
			LOCALE = terrain_scope
			OUTPUT_EVENT = fp1_yearly.2001
			INVALIDATION_EVENT = fp1_yearly.2002
		}

		stress_impact = {
			craven = major_stress_impact_gain
			forgiving = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
			calm = medium_stress_impact_gain
			temperate = minor_stress_impact_gain
			generous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			
			modifier = {
				factor = 2
				prowess > scope:child_to_leave.prowess
			}
			
			modifier = {
				factor = 0.1
				ai_compassion >= medium_positive_ai_value
			}
			
			modifier = {
				factor = 0
				OR = {
					has_trait = craven
					has_trait = forgiving
					has_trait = calm
				}
			}
		}
	}

	option = { # Remind them of their duties
		name = fp1_yearly.2000.b

		stress_impact = {
			impatient = major_stress_impact_gain
			wrathful = major_stress_impact_gain
			arrogant = medium_stress_impact_gain
			fickle = medium_stress_impact_gain
			vengeful = minor_stress_impact_gain
		}
		
		duel = {
			skill = diplomacy
			value = scope:child_to_leave.diplomacy

			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}

				desc = fp1_yearly.2000.b.success
				send_interface_toast = {
					title = fp1_yearly.2000.b.success
					left_icon = scope:child_to_leave


					add_prestige = medium_prestige_gain
					
					scope:child_to_leave = {
						custom_tooltip = fp1_yearly.2000.b.tt
						add_character_modifier = {
							modifier = mellowed_spirit
							years = 20
						}
					}
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}

				desc = fp1_yearly.2000.b.failure
				send_interface_toast = {
					title = fp1_yearly.2000.b.failure
					left_icon = scope:child_to_leave

					add_prestige = major_prestige_loss
					
					scope:child_to_leave = {
						child_leaves_effect = yes
					}
				}
			}
		}
		
		ai_chance = {
			base = 100
			
			modifier = {
				factor = 2
				diplomacy > scope:child_to_leave.diplomacy
			}
			
			modifier = {
				factor = 0
				OR = {
					has_trait = craven
					has_trait = forgiving
					has_trait = calm
				}
			}
		}
	}

	option = { # Bribe them
		name = fp1_yearly.2000.c

		stress_impact = {
			greedy = major_stress_impact_gain
			wrathful = major_stress_impact_gain
			arrogant = medium_stress_impact_gain
			vengeful = minor_stress_impact_gain
		}
			
		custom_tooltip = fp1_yearly.2000.c.tt
		pay_short_term_gold = {
			target = scope:child_to_leave
			gold = minor_gold_value
		}
		
		add_prestige = minor_prestige_loss
		
		
		ai_chance = {
			base = 100
			
			modifier = {
				factor = 0
				has_trait = greedy
			}
		}
	}

	option = { # Let them go, the fool...
		name = fp1_yearly.2000.d

		stress_impact = {
			arrogant = medium_stress_impact_gain
			stubborn = major_stress_impact_gain
			wrathful = major_stress_impact_gain
			vengeful = medium_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}
		custom_tooltip = fp1_yearly.2000.d.tt
		
		add_prestige = medium_prestige_loss
		
		scope:child_to_leave = {
			child_leaves_effect = yes
		}
		
		ai_chance = {
			base = 100
			
			modifier = {
				factor = 2
				ai_compassion >= medium_positive_ai_value
			}
			
			modifier = {
				factor = 0
				OR = {
					has_trait = stubborn
					has_trait = wrathful
				}
			}
		}
	}
}

fp1_yearly.2001 = {
	hidden = yes

	immediate = {
		if = {
			limit = {
				scope:parent = scope:sc_victor
			}
			trigger_event = { id = fp1_yearly.2003 days = 1 }
		}
		else = {
			trigger_event = { id = fp1_yearly.2004 days = 1 }
		}
	}
}

#	Bout has invalidated, inform affected parties.
fp1_yearly.2002 = {
	hidden = yes

	immediate = {
		# Inform both parties that the duel has invalidated.
		scope:parent = {
			send_interface_toast = {	
				title = fp1_yearly.2000.trigger_failure
				left_icon = scope:child_to_leave
			}
		}
	}
}

# Beat child in combat
fp1_yearly.2003 = {
	type = character_event
	title = fp1_yearly.2003.t
	desc = fp1_yearly.2003.desc
	theme = family
	left_portrait = {
		character = scope:child_to_leave
		animation = pain
	}
	right_portrait = {
		character = scope:lover_of_child
		animation = disapproval
	}
	override_background = { event_background = market_tribal }

	trigger = {

	}

	immediate = {
		
	}

	option = { # Father/Mother knows best!
		name = fp1_yearly.2003.a
		
		add_prestige = medium_prestige_gain
		scope:child_to_leave = {
			add_character_modifier = {
				modifier = mellowed_spirit
				years = 20
			}
		}
		
		ai_chance = {
			base = 100
		}
	}

	option = { # Break it off!
		name = fp1_yearly.2003.b
		
		add_prestige = medium_prestige_gain
		
		scope:child_to_leave = {
			add_character_modifier = {
				modifier = mellowed_spirit
				years = 20
			}
			remove_relation_lover = scope:lover_of_child
		}
		
		ai_chance = {
			base = 100
		}
	}
}

# Beaten by child in combat
fp1_yearly.2004 = {
	type = character_event
	title = fp1_yearly.2004.t
	desc = fp1_yearly.2004.desc
	theme = family
	left_portrait = {
		character = scope:child_to_leave
		animation = personality_honorable
	}
	right_portrait = {
		character = scope:lover_of_child
		animation = ecstasy
	}
	override_background = { event_background = market_tribal }

	trigger = {

	}

	immediate = {
		
	}

	option = { # Ouch...
		name = fp1_yearly.2004.a
		
		pay_short_term_gold = {
			target = scope:child_to_leave
			gold = minor_gold_value
		}
		
		add_prestige = medium_prestige_loss
		
		scope:child_to_leave = {
			child_leaves_effect = yes
		}
		
		ai_chance = {
			base = 100
		}
	}
}

scripted_trigger fighting_lover_trigger = {
	is_ai = yes
	has_personality_introverted_trigger = no
	is_physically_able_adult = yes
	NOT = {
		any_consort = {
			is_ai = no
			NOT = {
				this = root
			}
		}
	}
	OR = {
		is_ruler = no
		top_liege = root.top_liege
	}
}

# Two lovers duel for your love
fp1_yearly.2100 = {
	type = character_event
	title = fp1_yearly.2100.t
	desc = fp1_yearly.2100.desc
	theme = seduction
	left_portrait = {
		character = scope:lover_1
		animation = rage
	}
	right_portrait = {
		character = scope:lover_2
		animation = anger
	}
	override_background = { event_background = market }

	trigger = {
		#DLC check.
		has_fp1_dlc_trigger = yes
		
		#Standard checks.
		is_available_at_peace_adult = yes
		NOT = { has_character_flag = had_event_fp1_yearly_2100 }
		
		# You need two lovers
		any_relation = {
			type = lover
			fighting_lover_trigger = yes
			count >= 2
		}
		
		# Only one needs to be of a fighty culture
		any_relation = {
			type = lover
			fighting_lover_trigger = yes
			basic_can_have_trial_by_combat_trigger = yes
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_event_fp1_yearly_2100
			days = 1825
		}
		
		random_relation = {
			type = lover
			limit = {
				fighting_lover_trigger = yes
			}
			save_scope_as = lover_2
			set_signature_weapon_effect = yes
		}
		
		random_relation = {
			type = lover
			limit = {
				fighting_lover_trigger = yes
				NOT = {
					this = scope:lover_2
				}
			}
			save_scope_as = lover_1
			set_signature_weapon_effect = yes
		}
		
		save_scope_as = lover_quarrel_target
			
		hidden_effect = {
			scope:lover_1 = {
				if = {
					limit = {
						any_known_secret = {
							secret_type = secret_lover
							secret_target = scope:lover_quarrel_target
							NOT = { is_known_by = scope:lover_2 }
						}
					}
					
					random_known_secret = {
						limit = {
							secret_type = secret_lover
							secret_target = scope:lover_quarrel_target
							NOT = { is_known_by = scope:lover_2 }
						}
						save_scope_as = secret
						reveal_to_without_events_effect = {
							CHARACTER = scope:lover_2
						}
					}
				}
			}
			
			scope:lover_2 = {
				if = {
					limit = {
						any_known_secret = {
							secret_type = secret_lover
							secret_target = scope:lover_quarrel_target
							NOT = { is_known_by = scope:lover_1 }
						}
					}
					
					random_known_secret = {
						limit = {
							secret_type = secret_lover
							secret_target = scope:lover_quarrel_target
							NOT = { is_known_by = scope:lover_1 }
						}
						save_scope_as = secret
						reveal_to_without_events_effect = {
							CHARACTER = scope:lover_1
						}
					}
				}
				if = {
					limit = {
						has_relation_friend = scope:lover_1
					}
					remove_relation_friend = scope:lover_1
				}
				else_if = {
					limit = {
						has_relation_best_friend = scope:lover_1
					}
					remove_relation_best_friend = scope:lover_1
				}
				if = {
					limit = {
						NOR = {
							has_relation_rival = scope:lover_1
							has_relation_nemesis = scope:lover_1
						}
					}
					if = {
						limit = {
							can_set_relation_nemesis_trigger = { CHARACTER = scope:lover_1 }
						}
						set_relation_nemesis = {
							target = scope:lover_1
							reason = rival_competing_lovers
						}
					}
					else = {
						set_relation_rival = {
							target = scope:lover_1
							reason = rival_competing_lovers
						}
					}
				}
			}
		}
	}

	option = {
		name = fp1_yearly.2100.a
		
		custom_tooltip = fp1_yearly.2100.a.tt
		
		configure_start_single_combat_effect = {
			SC_INITIATOR = scope:lover_quarrel_target
			SC_ATTACKER = scope:lover_1
			SC_DEFENDER = scope:lover_2
			FATALITY = always
			FIXED = no
			LOCALE = terrain_scope
			INVALIDATION_EVENT = fp1_yearly.2002
			OUTPUT_EVENT = fp1_yearly.2101
		}

		stress_impact = {
			forgiving = medium_stress_impact_gain
			compassionate = major_stress_impact_gain
			calm = medium_stress_impact_gain
			content = medium_stress_impact_gain
			just = medium_stress_impact_gain
			humble = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = -1
				ai_honor = -1
			}
		}
	}

	option = {
		name = fp1_yearly.2100.b
		
		duel = {
			skill = diplomacy
			value = 12

			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}

				desc = fp1_yearly.2100.b.success
				send_interface_toast = {
					title = fp1_yearly.2100.b.success
					left_icon = scope:child_to_leave
					
					custom_tooltip = fp1_yearly.2100.b.tt
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}

				desc = fp1_yearly.2100.b.failure
				send_interface_toast = {
					title = fp1_yearly.2100.b.failure
					left_icon = scope:lover_1
					right_icon = scope:lover_2

					custom_tooltip = fp1_yearly.2100.a.tt
		
					configure_start_single_combat_effect = {
						SC_INITIATOR = scope:lover_quarrel_target
						SC_ATTACKER = scope:lover_1
						SC_DEFENDER = scope:lover_2
						FATALITY = always
						FIXED = no
						LOCALE = terrain_scope
						INVALIDATION_EVENT = fp1_yearly.2002
						OUTPUT_EVENT = fp1_yearly.2101
					}
				}
			}
		}

		stress_impact = {
			arrogant = major_stress_impact_gain
			sadistic = major_stress_impact_gain
			callous = medium_stress_impact_gain
			arbitrary = medium_stress_impact_gain
			fickle = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 1
				ai_rationality = 0.5
			}
		}
	}

	option = {
		name = fp1_yearly.2100.c
		
		duel = {
			skill = prowess
			value = {
				add = scope:lover_1.prowess
				add = scope:lover_2.prowess
				divide = 2
			}

			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}

				desc = fp1_yearly.2100.c.success
				send_interface_toast = {
					title = fp1_yearly.2100.c.success
					left_icon = scope:child_to_leave
					
					custom_tooltip = fp1_yearly.2100.c.tt
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}

				desc = fp1_yearly.2100.c.failure
				send_interface_toast = {
					title = fp1_yearly.2100.c.failure
					left_icon = scope:lover_1
					right_icon = scope:lover_2

					custom_tooltip = fp1_yearly.2100.a.tt
		
					configure_start_single_combat_effect = {
						SC_INITIATOR = scope:lover_quarrel_target
						SC_ATTACKER = scope:lover_1
						SC_DEFENDER = scope:lover_2
						FATALITY = always
						FIXED = no
						LOCALE = terrain_scope
						INVALIDATION_EVENT = fp1_yearly.2002
						OUTPUT_EVENT = fp1_yearly.2101
					}
				}
			}
		}

		stress_impact = {
			craven = major_stress_impact_gain
			arrogant = minor_stress_impact_gain
			sadistic = major_stress_impact_gain
			callous = medium_stress_impact_gain
			arbitrary = medium_stress_impact_gain
			fickle = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = 0.5
			}
		}
	}
}

fp1_yearly.2101 = {
	type = character_event
	title = fp1_yearly.2101.t
	desc = fp1_yearly.2101.desc
	theme = seduction
	left_portrait = {
		character = scope:lover_1
		triggered_animation = {
			trigger = { is_alive = yes }
			animation = flirtation
		}
		triggered_animation = {
			trigger = { is_alive = no }
			animation = shock
		}
	}
	right_portrait = {
		character = scope:lover_2
		triggered_animation = {
			trigger = { is_alive = yes }
			animation = flirtation
		}
		triggered_animation = {
			trigger = { is_alive = no }
			animation = shock
		}
	}
	override_background = { event_background = market_tribal }

	trigger = {

	}

	immediate = {
		if = {
			limit = {
				scope:lover_1 = {
					is_alive = yes
				}
			}
			scope:lover_1 = {
				save_scope_as = winning_lover
			}
			scope:lover_2 = {
				save_scope_as = losing_lover
			}
		}
		else = {
			scope:lover_2 = {
				save_scope_as = winning_lover
			}
			scope:lover_1 = {
				save_scope_as = losing_lover
			}
		}
	}

	option = {
		name = fp1_yearly.2101.a
		
		if = {
			limit = {
				num_of_relation_soulmate <= 0
			}
			hidden_effect = {
				scope:winning_lover = {
					every_relation = {
						type = soulmate
						remove_relation_soulmate = scope:winning_lover
					}
				}
			}
			set_relation_soulmate = { reason = soulmate_won_love_in_duel_2 copy_reason = lover target = scope:winning_lover }
		}
		else = {
			scope:winning_lover = {
				add_opinion = {
					target = scope:lover_quarrel_target
					modifier = love_opinion
					opinion = 30
				}
			}
		}
		
		had_sex_with_effect = {
			CHARACTER = scope:winning_lover
			PREGNANCY_CHANCE = pregnancy_chance
		}
		
		stress_impact = {
			forgiving = major_stress_impact_gain
			compassionate = major_stress_impact_gain
			humble = major_stress_impact_gain
			just = medium_stress_impact_gain
			chaste = major_stress_impact_gain
		}
		
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = fp1_yearly.2101.b
		
		remove_relation_lover = scope:winning_lover
		
		scope:winning_lover = {
			add_opinion = {
				target = scope:lover_quarrel_target
				modifier = lover_hurt_me_opinion
				years = 30
			}
		}
		
		add_opinion = {
			target = scope:winning_lover
			modifier = murdered_someone_close_to_me_crime
			years = 30
		}
		
		stress_impact = {
			forgiving = major_stress_impact_gain
			vengeful = major_stress_impact_gain
			arbitrary = medium_stress_impact_gain
			trusting = medium_stress_impact_gain
			lustful = major_stress_impact_gain
		}
		
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = fp1_yearly.2101.c
		
		scope:winning_lover = {
			add_opinion = {
				target = scope:lover_quarrel_target
				modifier = pleased_opinion
				opinion = 10
			}
		}
		
		stress_impact = {
			forgiving = major_stress_impact_gain
			compassionate = major_stress_impact_gain
			humble = major_stress_impact_gain
			just = medium_stress_impact_gain
			chaste = major_stress_impact_gain
		}
		
		had_sex_with_effect = {
			CHARACTER = scope:winning_lover
			PREGNANCY_CHANCE = pregnancy_chance
		}
		
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = fp1_yearly.2101.d
		
		scope:winning_lover = {
			add_opinion = {
				target = scope:lover_quarrel_target
				modifier = lover_being_mean_opinion
				years = 10
			}
		}
		
		stress_impact = {
			vengeful = major_stress_impact_gain
			arbitrary = medium_stress_impact_gain
			trusting = medium_stress_impact_gain
			lustful = major_stress_impact_gain
		}
		
		ai_chance = {
			base = 100
		}
	}
}

# Invest in something that'll aid in your hunts
fp1_yearly.2400 = {
	type = character_event
	title = fp1_yearly.2400.t
	desc = fp1_yearly.2400.desc
	theme = hunt_activity
	left_portrait = {
		character = root
		animation = personality_rational 
	}
	override_background = { event_background = fp1_runestone }

	trigger = {
		#DLC check.
		has_fp1_dlc_trigger = yes
		
		#Standard checks.
		is_available_at_peace_adult = yes
		NOT = { has_character_flag = had_event_fp1_yearly_2400 }
		
		is_landed = yes
		
		NOR = {
			has_trait = lazy
			any_owned_story = {
				story_type = story_cycle_pet_dog
			}
		}
	}

	immediate = {
		hidden_effect = {
			add_character_flag = {
				flag = had_event_fp1_yearly_2400
				days = 1825
			}
		}
		
		select_local_animal_effect = yes
		
		capital_province = {
			save_scope_as = hunting_province
		}
	}

	option = {
		name = fp1_yearly.2400.a
		
		start_dog_story_cycle_effect = yes
		remove_short_term_gold = minor_gold_value

		stress_impact = {
			greedy = major_stress_impact_gain
			shy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_greed = -1
			}
		}
	}

	option = {
		name = fp1_yearly.2400.b
		
		add_character_modifier = {
			modifier = brand_new_hunting_tools
			years = 25
		}
		remove_short_term_gold = minor_gold_value

		stress_impact = {
			greedy = major_stress_impact_gain
			temperate = medium_stress_impact_gain
		}
		
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_greed = -1
			}
		}
	}

	option = {
		name = fp1_yearly.2400.c
		
		custom_tooltip = fp1_yearly.2400.free_hunt
		hidden_effect = {
			add_character_flag = {
				flag = free_hunt
			}
		}

		stress_impact = {
			impatient = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_greed = 1
			}
		}
	}

	after = { remove_variable = local_animal }
}